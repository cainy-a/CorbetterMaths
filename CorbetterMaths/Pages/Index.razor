@page "/"
@using System.Text
@using System.Xml
@using System.Xml.Linq
@using FastFuzzyStringMatcher
@inject HttpClient Http

<h1 class="ui header">Cor<span style="color: red">better</span> Maths</h1>
<h2>
	A better website for
	<em>
		<a href="//corbettmaths.com/contents">
			Corbett Maths
			<i class="external square alternate icon"></i>
		</a>
	</em>
</h2>

@if (!_content.Any())
{
	<p>Currently loading and processing CorbettMaths content. This shouldn't take long</p>
	<div class="ui active inline loader"></div>
}
else
{
	<div class="ui input" style="margin-right: 1rem">
		<input type="text" placeholder="Enter a video number" @bind="_searchNumber">
	</div>

	<button class="ui icon labeled button" @onclick="SearchByNum">
		<i class="search icon" />
		Search Content by Number
	</button>

	<div class="ui input" style="margin-right: 1rem">
		<input type="text" placeholder="Enter a topic" @bind="_searchString">
	</div>

	<button class="ui icon labeled button" @onclick="SearchByTopic">
		<i class="search icon" />
		Search Content by Topic
	</button>

	if (_hasSearched)
	{
		if (_itemToShow != null)
		{
			<p>Here's your delicious maths video, served hot and fresh from the oven.</p>

			<div class="ui card">
				<div class="content">
					<div class="header">@_itemToShow.Topic</div>
					<div class="meta">Video #@_itemToShow.Number</div>
					<div class="description">
						<div class="ui icon buttons">
							<a class="ui button" data-tooltip="Watch Video" href="@_itemToShow.VideoUri" target="_blank">
								<i class="play icon" />
							</a>
							<a class="ui button" data-tooltip="Practice Questions" href="@_itemToShow.PracticeQuestionsUri" download>
								<i class="pencil alternate icon" />
							</a>
							<a class="ui button" data-tooltip="Textbook Exercise" href="@_itemToShow.TextbookExerciseUri" download>
								<i class="book open icon" />
							</a>
						</div>
					</div>
				</div>
			</div>
		}
		else if (_itemsToShow != null && _itemsToShow.Any())
		{
			<p>Here are your delicious maths videos, served hot and fresh from the oven.</p>

			<div class="ui cards">
				@foreach (var itemToShow in _itemsToShow)
				{
					<div class="ui card">
						<div class="content">
							<div class="header">@itemToShow.AssociatedData.Topic</div>
							<div class="meta">Video #@itemToShow.AssociatedData.Number, @MathF.Round(itemToShow.MatchPercentage, 1)% match</div>
							<div class="description">
								<div class="ui icon buttons">
									<a class="ui button" data-tooltip="Watch Video" href="@itemToShow.AssociatedData.VideoUri" target="_blank">
										<i class="play icon" />
									</a>
									<a class="ui button" data-tooltip="Practice Questions" href="@itemToShow.AssociatedData.PracticeQuestionsUri" download>
										<i class="pencil alternate icon" />
									</a>
									<a class="ui button" data-tooltip="Textbook Exercise" href="@itemToShow.AssociatedData.TextbookExerciseUri" download>
										<i class="book open icon" />
									</a>
								</div>
							</div>
						</div>
					</div>
				}
			</div>
			<p>
				Not what you're looking for? Click
				<a @onclick="SearchByTopicSimple" style="cursor: pointer">here</a>
				for the fallback search system. The fallback search system does not
				allow lenience for typos but may find more relevant content.
			</p>
		}
		else
		{
			<p>Aw crumbs. Your search turned up nothing!</p>
		}
	}
}

@code {

#pragma warning disable 649 // it's assigned via @bind=""
	private string _searchNumber;
#pragma warning restore 649

#pragma warning disable 649 // it's assigned via @bind=""
	private string _searchString;
#pragma warning restore 649

	private StringMatcher<Content> _stringMatcher;

	private Content _itemToShow;

	private SearchResult<Content>[] _itemsToShow;

	private readonly int _searchLenience = 15;

	private readonly float _searchThreshold = 30;

	private bool _hasSearched;

	private void SearchByNum()
	{
		_hasSearched = true;

		_itemsToShow = null;

		_itemToShow = _content.ElementAtOrDefault(_contentIndex.FirstOrDefault(c => c.Key == _searchNumber).Value)
					  ?? new Content( // easter egg for people messing with me
							 _searchNumber,
							 "Completing the Square",
							 "https://www.youtube.com/watch?v=zTieVfekCec",
							 "/corbett-maths_completing-the-square_exercise.pdf",
							 "/corbett-maths_completing-the-square_textbook.pdf");
	}

	private void SearchByTopic()
	{
		_hasSearched = true;

		_itemToShow = null;

		_itemsToShow = _stringMatcher.Search(_searchString, _searchLenience).Where(r => r.MatchPercentage >= _searchThreshold).ToArray();

		if (!_itemsToShow.Any()) SearchByTopicSimple();
	}

	private void SearchByTopicSimple()
	{
		_hasSearched = true;

		_itemToShow = null;

		_itemsToShow = _content.Where(c => c.Topic.Contains(_searchString)).Select(c => new SearchResult<Content>(_searchString, c, 0)).ToArray();
	}

	private void InitFuzzyStringMatcher()
	{
		_stringMatcher = new StringMatcher<Content>();
		foreach (var contentItem in _content) _stringMatcher.Add(contentItem.Topic, contentItem);
	}

	private Content[] _content = new Content[0];

	private readonly Dictionary<string, int> _contentIndex = new Dictionary<string, int>();

	private void BuildIndex()
	{
		for (var i = 0; i < _content.Length; i++) _contentIndex.Add(_content[i].Number, i);
	}



	// Here be dragons; proceed at the risk of your own sanity

	protected override async Task OnInitializedAsync()
	{
		await ProcessData();
		InitFuzzyStringMatcher();
		BuildIndex();
	}

	private async Task ProcessData() => _content = ParseContentPage(await GetContentList());

	private async Task<string> GetContentList() => await Http.GetStringAsync(Http.BaseAddress);

	private Content[] ParseContentPage(string html)
	{
		var xml = Majestic12ToXml.ConvertNodesToXml(Encoding.UTF8.GetBytes(html)).ToArray();

		var elements = ((XElement)xml[0]).DescendantsAndSelf().ToArray();

		// ReSharper I really dont care right now
		// ReSharper disable once PossibleNullReferenceException
		var content = (
						  from x in elements
						  where x.Attribute("class")?.Value == "entry-content"
						  select x)
			.First();

		var contentItems = content.Descendants("p").ToArray();

		return (from contentItem in contentItems
		        select contentItem.DescendantNodes().Where(n => // Get all nodes
			                                                   n.Parent == contentItem // Remove children of children
			                                                   && (n as XText)?.Value.Trim() != string.Empty) // Remove any whitespace text elements
		                          .ToArray()
		        into innerDescendants
		        where IsValid(innerDescendants)
		        let text = innerDescendants.Where(n => n.NodeType == XmlNodeType.Text).Cast<XText>().First()
		        let links = innerDescendants.Where(n => n.NodeType == XmlNodeType.Element && ((XElement) n).Name == XName.Get("a")).Cast<XElement>().ToArray()
		        let linkText = links.Select(l => ((XText) l.DescendantNodes().First()).Value).ToArray()
		        let linkRefs = links.Select(l => l.Attributes().First(a => a.Name == XName.Get("href")).Value).ToArray()
		        let videoNumber = linkText[0].Remove(0, 6)
		        let videoLink = linkRefs[0]
		        let practiceLink = linkRefs.ElementAtOrDefault(1)
		        let textbookLink = linkRefs.ElementAtOrDefault(2)
		        let topic = text.Value.Trim()
		        select new Content(videoNumber, topic, videoLink, practiceLink, textbookLink)).ToArray();
	}

	private static bool IsValid(IReadOnlyCollection<XNode> nodeDescendants) =>
		nodeDescendants.Count >= 2 && nodeDescendants.Count <= 4                               // Make sure there's 2 - 4 descendants
	 && nodeDescendants.Where(d => (d as XElement)?.Name == "a").ToArray().Length >= 1    // Make sure there's at least 1 link
	 && nodeDescendants.Where(d => (d as XElement)?.Name == "a").ToArray().Length <= 3    // Make sure there's no more than 3 links
	 && nodeDescendants.Any(d =>
								(d as XElement)?.Name == "a"
							&& ((d as XElement).FirstNode as XText).Value.Contains("Video"))   // One link must contain "Video"
	 && nodeDescendants.Where(d => d.NodeType == XmlNodeType.Text).ToArray().Length == 1; // One is just text

	private class Content
	{
		public readonly string Number;
		public readonly string Topic;
		public readonly string VideoUri;
		public readonly string PracticeQuestionsUri;
		public readonly string TextbookExerciseUri;

		public Content(string number, string topic, string videoUri, string practiceQuestionsUri, string textbookExerciseUri)
		{
			Number = number;
			Topic = topic;
			VideoUri = videoUri;
			PracticeQuestionsUri = practiceQuestionsUri;
			TextbookExerciseUri = textbookExerciseUri;
		}
	}

}
